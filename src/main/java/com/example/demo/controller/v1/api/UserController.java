package com.example.demo.controller.v1.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import com.example.demo.model.user.User;
import com.auth0.jwt.JWT;
import com.example.demo.controller.v1.request.user.AddUserRequest;

import java.util.Date;
import java.util.Optional;
import javax.validation.Valid;
import com.example.demo.dao.UserRepository;
import com.example.demo.dto.model.user.UserDto;
import com.example.demo.dto.response.Response;
import com.example.demo.service.UserService;
import static com.auth0.jwt.algorithms.Algorithm.HMAC512;

@RestController // This means that this class is a Controller and add ResponseBody to class
                // methods
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @PostMapping() // Map ONLY POST Requests
    public Response<Object> addNewUser(@RequestBody @Valid AddUserRequest userRequest) {
        User user = new User().setName(userRequest.getName()).setEmail(userRequest.getEmail())
                .setAge(userRequest.getAge()).setDateOfBirth(userRequest.getDateOfBirth())
                .setPassword(userRequest.getPassword());
        // Create JWT Token
        final String token = JWT.create().withSubject(user.getEmail())
                .withExpiresAt(new Date(System.currentTimeMillis() + (10 * 24 * 60 * 60000)))
                .sign(HMAC512("SomeSecretForJWTGeneration"));
        UserDto userData = userService.signup(user).setToken(token);

        return Response.ok().setPayload(userData);
    }

    @GetMapping()
    public Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/{id}")
    public Optional<User> getUser(@PathVariable(name = "id") Integer id) {
        // This returns a JSON or XML with the users
        return userRepository.findById(id);
    }
}